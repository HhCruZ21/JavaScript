What is ECMAScript?

    -> ECMAScript is a Javascript standard intended to ensure the interoperability of web pages across different browsers.






Who owns the trademark for Javascript : Oracle






What is a Javascript Engine






Learn about the console function in JS

    ->  A web console is a tool which is used to log information associated with a web page like
        network requests, Javascript, security errors etc..

    ->  'console' is an object that provides access to browsers debugging console.

    ->  There are different functions in console object

        ->  .log()

        ->  .error()

        ->  .warn()

        ->  .clear()

        ->  .time() and .timeEnd()

        ->  .table()

        ->  .count()

        ->  .group() and .groupEnd()





Javascript for beginners

1. Variables in Javascript

    ->  Why do we need Variables

    ->  const, let, var 

        -> What are the rules for giving variable names in Javascript


    ->  var is declared with a function scope, while let and const have block scope.

    ->  Function scope : When a variable is declared inside a function, it is only accessible within that function and cannot be used outside the function.

    ->  Block scope : A variable when declared inside the if or switch statements, or inside loops, the variables are accessible only inside the block or curly braces.

        Example

            function hello() {

                if(true) {

                    var a = "Javascript"
                    let b = "C++"
                    const c = "Python"

                    console.log(a)
                    console.log(b)
                    console.log(c)
                }

                console.log("Outside IF")
                console.log(a)
                console.log(b)
                console.log(c)
            }


            Error occures when we try access 'b' outside the if block as the scope is block scope with let decleration. Same is the case with variable 'c'






2. Constants in Javascript

    -> We use the keyword const to declare such variables. Eg: const a = 2.14



Compare const, let and var in javascript.






3. Data types in JS can be of two types :- primitive and objects

    -> Primitive types are Number, string, boolean, null, undefined, Symbol, BigInt

        ->  Range of number in java 1.79769e+308. Safe number would be 9007199254740991. Anything bigger can be used as of type BigInt.
            To get the max value allowed for numbers print the value of Number.MAX_VALUE. Whenever we go beyond this value we get result as infinity.
            If we say n at the end of a big number like 90071992547409911n then we can get the value as BigInt to prevent loss of data 
            which is present in the scientific notation.

        -> To improve readability of large numbers we can represent 10000000 as 100_00_000

        -> How to define numbers in different base systems, floating point numbers.


    ->  Undefined in JS means that the variable has been declared but no value has been assigned to it.

    ->  Null means the intentional absence of data. 





    -> String functions in javascript

        ->  String concatenation using +

        ->  To print something like Haizon "Helet" double quoutes inside the string, print it as "Haizon \"Helet\""

        -> String literals in javascript







4.  Type Conversion & Coercion


    ->  Explicit type Conversion

    ->  Implicit type Conversion

    ->  Coercion sets in an example operation like when we add a number and a string.
        Makes both of a compatible type and performs the operation


    ->  Difference between Number object and parseInt()






5. Operations in JS

    ->  Arithmetic, Relational. Logical, Assignment, Unary Operations

    ->  Terenary operation






6. Math functions in JS


    ->  Properties

    ->  Methods





7. Conditional Statements in JS

    -> if, if else, if elseif else, switch






8. Jump Statements in JS

    ->  break and continue are the jump statements in JS






9. Loops in JS

    ->  for, while, do-while, for-in Loops






10. Template Literals in JS

    -> Using the `` instead of double quotes and then use the ${} symbol to define literals in JS.






11. Objects in JS

    ->  var a = {} is how we define an object.

    ->  var a = {
                    name: "Haizon",
                    age: 23
                }

    ->  To get a value we do a.name

    ->  Say we have the name of the property in another variable 

        var p ='name'

        console.log(a[p])

    ->  To delete a property say name : delete a.name






12. Functions in JS

    ->  function function_name() {

                                }

    ->  Function return and passing

    ->  Function expressions in JS

        ->  let add = function(num1, num2) {

            return num1 + num2
        }

        let result = add(5,6)


    ->  Arrow functions in JS

        ->  let add = ()=> {

            function_body

        }






13. What is the difference between methods and functions in JS









Complete by 30-11-2022








14. this keyword

    ->  






15. Constructor function in JS






16. Arrays

    ->  Creating and fetching data from an array.

    ->  Different types of Arrays

    ->  Array methods

    ->  Array destructuring

    ->  Array ForEach

    ->  Array method filter map reduce

    ->  Set in Javascript

    ->  Map in Javascript






17. Recursion


18. Some more useful references

    ->  https://www.w3schools.com/jsref/obj_location.asp



19. Javascript Design Patterns

20. Regex Pattern 

21. Exceptions and Error Handling

22. Namespaces, Closures and module pattern.











Interview questions - Javascript

    1.  Why is javascript called a dynamic language

        ->  The datatypes of the variables can change during the runtime.

            Example :

                var x = 0   // number type

                x++;

                x = "Text"  // string type

                x = true    // boolean type

        

    2.  How does JS determine data types?

        ->  Depending on the values assigned to the variable during runtime.



    3.  Hoisting in JS

        ->  A mechanism where variables and functions are declared are moved to the top of the scope.

        ->  Javascript initialization are not hoisted 



    4.  What happens when you declare a variable without the var keyword

        ->  The variable becomes global.



    5.  Default value of a variable is null or undefined.

    6.  "use strict" is a directive that strictly checks if the variable is declared using var or let keyword.

    7.  It is difficult to avoid global variables. But we can organize it properly by doing two things.

        ->  Put global variables in a proper namespace.

        ->  Module pattern using closures and IIFE.

    8.  Closures are functions inside a function which makes a normal function stateful. 

    9.  The only use of having closures is to have a self contained state/function.

    10. How can we implement OOPS in JS.

    11. What is IIFE : Immediately invoked function expression, Anonymous function that is immediately invoked. 

        ->  (function() {
                var y = 10
                alert("I am IIFE")
        })();                                           //  The last two brackets means it's immediately invoked.

    12. What is the difference between a normal function and IIFE?

    13. What is name collision in JS?

        ->  function Init() {
                var x = 0
        }

        var Init = 0            //function has now become a variable as JS is a dynamic language
        Init()

    14. What are the various ways to create a JS object

        ->  a. //literals

                var obj = {"name": "PersonOne", "age": 23}

                //to add a function as a property

                obj.admit = function() {
                    alert("Admitted")
                }

                //admit has been added as a property which when invoked executes the function releated.

            b.  //object.create

                    var patnew = object.create(obj)     //Creates a new object or an instance of the last object named obj

            c.  //Constructor

                    function Patient() {
                        this.name = ""
                        this.age = 0
                        this.admit = function(){

                        }
                    }

                    var obj = new Patient()


            d.  //class

                    class PatientClass {
                        constructor(name, address){
                            this.name = ""
                            this.address = ""
                        }


                    }

                    var p = new PatientClass()


    15. Explain Prototyping and Prototype chaining in JS

    16. Is the let type hoisted?

        ->  In javascript only var type is hoisted. let and const is not hoisted.

    17. What is Temporal Dead Zone?

        ->  It is a period or it's state of a variable where variables are named in memory but they are not initialized with any value.


            //This is Temporal Dead Zone

                console.log(x)

            //This is Temporal Dead Zone
            //This is Temporal Dead Zone

                let x = 10; //End of Temporal Dead Zone



    18. map(), filter(), reduce() methods in JS


